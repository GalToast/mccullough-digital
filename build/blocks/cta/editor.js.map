{"version":3,"file":"blocks/cta/editor.js","mappings":"mBAAA,MAAM,EAA+BA,OAAc,MCA7C,EAA+BA,OAAW,GAAU,OCApD,EAA+BA,OAAW,GAAQ,KCAlD,EAA+BA,OAAW,GAAW,QCArD,EAA+BA,OAAW,GAAQ,KCAlD,EAA+BA,OAAW,GAAe,Y,svCCW/D,MAAMC,EAAyD,QAA1CC,EAAGC,GAAUC,YAAYC,UAAUC,eAAO,IAAAJ,EAAAA,EAAI,GAC7DK,EAA6D,QAA5CC,EAAGL,GAAUC,YAAYK,YAAYH,eAAO,IAAAE,EAAAA,GAC5DE,EAAAA,EAAAA,IAAG,aAAe,sBACnBC,EAA6D,QAA5CC,EAAGT,GAAUC,YAAYS,YAAYP,eAAO,IAAAM,EAAAA,EAAI,IAGnEE,aACIC,cAAeC,EAAmB,CAC9B,eACA,iBACA,YACA,eACA,aACA,cAEJC,SAAUC,EAAc,CACpB,CACI,eACA,CACIC,MAAO,EACPC,UAAW,gBACXC,aAAaX,EAAAA,EAAAA,IAAG,oBAAqB,sBACrCY,QAASrB,IAGjB,CACI,eACA,CACIsB,OAAQ,CACJC,KAAM,OACNC,eAAgB,WAGxB,CACI,CACI,cACA,CACIL,UAAW,aACXM,KAAMnB,EACNoB,IAAKhB,OAMzBiB,aAAcC,GAAkB,GAChC,CAAC,GACL1B,GAEJ2B,EAAAA,EAAAA,mBAAkB3B,EAAAA,KAAe,IAC1BA,EACH4B,IAAAA,EAAK,WAAE3B,EAAU,SAAE4B,IACf,MAAM,SAAE3B,EAAQ,WAAEI,EAAU,WAAEI,GAAeT,EACvC6B,GAAaC,EAAAA,EAAAA,eAAc,CAC7Bd,UAAW,gBAGTe,GAAcC,EAAAA,EAAAA,SAAO,IACrB,YAAEtB,EAAc,KAAOuB,EAAAA,EAAAA,WACxBC,IAAM,CACHxB,YAAawB,EAAO,qBAAqBC,UAAUP,KAEvD,CAACA,KAEC,mBAAEQ,IAAuBC,EAAAA,EAAAA,aAAY,qBA4D3C,OA1DAC,EAAAA,EAAAA,WAAU,KACN,GAAIP,EAAYQ,QACZ,OAGJ,GAAI7B,EAAY8B,OAAS,EAErB,YADAT,EAAYQ,SAAU,GAI1B,MAAME,EAAkB,GAYxB,GAVIxC,GACAwC,EAAgBC,MACZC,EAAAA,EAAAA,aAAY,eAAgB,CACxB5B,MAAO,EACPC,UAAW,gBACXE,QAASjB,KAKjBI,GAAcI,EAAY,CAC1B,MAAMmC,GAASD,EAAAA,EAAAA,aAAY,cAAe,CACtC3B,UAAW,aACXM,KAAMjB,GAAcF,EACpBoB,IAAKd,QAAcoC,IAGjBC,GAAiBH,EAAAA,EAAAA,aACnB,eACA,CACIxB,OAAQ,CACJC,KAAM,OACNC,eAAgB,WAGxB,CAACuB,IAGLH,EAAgBC,KAAKI,EACzB,CAE+B,IAA3BL,EAAgBD,SAIpBJ,EAAmBR,EAAUa,GAAiB,GAC9CV,EAAYQ,SAAU,IACvB,CACC9B,EACAJ,EACAuB,EACA3B,EACAS,EAAY8B,OACZJ,KAIAW,EAAAA,EAAAA,eAAAC,EAAAA,SAAA,MACID,EAAAA,EAAAA,eAAA,cAAalB,IACTkB,EAAAA,EAAAA,eAAA,OAAK/B,UAAU,cACX+B,EAAAA,EAAAA,eAACE,EAAAA,YAAW,CACRtC,cAAgBC,EAChBC,SAAWC,EACXU,aAAeC,MAMvC,EACAyB,KAAIA,KACOH,EAAAA,EAAAA,eAACE,EAAAA,YAAYE,QAAO,O","sources":["webpack://mccullough-digital-theme/external window \"React\"","webpack://mccullough-digital-theme/external window [\"wp\",\"blocks\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"i18n\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"element\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"data\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"blockEditor\"]","webpack://mccullough-digital-theme/./blocks/cta/editor.js"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","import { registerBlockType, createBlock } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport { useEffect, useRef } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport {\n    useBlockProps,\n    InnerBlocks,\n} from '@wordpress/block-editor';\n\nimport metadata from './block.json';\n\nconst defaultHeadline = metadata?.attributes?.headline?.default ?? '';\nconst defaultButtonText = metadata?.attributes?.buttonText?.default\n    ?? __('Let\\'s Talk', 'mccullough-digital');\nconst defaultButtonLink = metadata?.attributes?.buttonLink?.default ?? '';\n\nconst {\n    innerBlocks: {\n        allowedBlocks: allowedCtaBlocks = [\n            'core/heading',\n            'core/paragraph',\n            'core/list',\n            'core/buttons',\n            'core/group',\n            'core/image',\n        ],\n        template: ctaTemplate = [\n            [\n                'core/heading',\n                {\n                    level: 2,\n                    className: 'section-title',\n                    placeholder: __('Add CTA headlineâ€¦', 'mccullough-digital'),\n                    content: defaultHeadline,\n                },\n            ],\n            [\n                'core/buttons',\n                {\n                    layout: {\n                        type: 'flex',\n                        justifyContent: 'center',\n                    },\n                },\n                [\n                    [\n                        'core/button',\n                        {\n                            className: 'cta-button',\n                            text: defaultButtonText,\n                            url: defaultButtonLink,\n                        },\n                    ],\n                ],\n            ],\n        ],\n        templateLock: ctaTemplateLock = false,\n    } = {},\n} = metadata;\n\nregisterBlockType(metadata.name, {\n    ...metadata,\n    edit({ attributes, clientId }) {\n        const { headline, buttonText, buttonLink } = attributes;\n        const blockProps = useBlockProps({\n            className: 'cta-section',\n        });\n\n        const hasMigrated = useRef(false);\n        const { innerBlocks = [] } = useSelect(\n            (select) => ({\n                innerBlocks: select('core/block-editor').getBlocks(clientId),\n            }),\n            [clientId]\n        );\n        const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n        useEffect(() => {\n            if (hasMigrated.current) {\n                return;\n            }\n\n            if (innerBlocks.length > 0) {\n                hasMigrated.current = true;\n                return;\n            }\n\n            const generatedBlocks = [];\n\n            if (headline) {\n                generatedBlocks.push(\n                    createBlock('core/heading', {\n                        level: 2,\n                        className: 'section-title',\n                        content: headline,\n                    })\n                );\n            }\n\n            if (buttonText || buttonLink) {\n                const button = createBlock('core/button', {\n                    className: 'cta-button',\n                    text: buttonText || defaultButtonText,\n                    url: buttonLink || undefined,\n                });\n\n                const buttonsWrapper = createBlock(\n                    'core/buttons',\n                    {\n                        layout: {\n                            type: 'flex',\n                            justifyContent: 'center',\n                        },\n                    },\n                    [button]\n                );\n\n                generatedBlocks.push(buttonsWrapper);\n            }\n\n            if (generatedBlocks.length === 0) {\n                return;\n            }\n\n            replaceInnerBlocks(clientId, generatedBlocks, false);\n            hasMigrated.current = true;\n        }, [\n            buttonLink,\n            buttonText,\n            clientId,\n            headline,\n            innerBlocks.length,\n            replaceInnerBlocks,\n        ]);\n\n        return (\n            <>\n                <section {...blockProps}>\n                    <div className=\"container\">\n                        <InnerBlocks\n                            allowedBlocks={ allowedCtaBlocks }\n                            template={ ctaTemplate }\n                            templateLock={ ctaTemplateLock }\n                        />\n                    </div>\n                </section>\n            </>\n        );\n    },\n    save() {\n        return <InnerBlocks.Content />;\n    },\n});\n"],"names":["window","defaultHeadline","_metadata$attributes$","metadata","attributes","headline","default","defaultButtonText","_metadata$attributes$2","buttonText","__","defaultButtonLink","_metadata$attributes$3","buttonLink","innerBlocks","allowedBlocks","allowedCtaBlocks","template","ctaTemplate","level","className","placeholder","content","layout","type","justifyContent","text","url","templateLock","ctaTemplateLock","registerBlockType","edit","clientId","blockProps","useBlockProps","hasMigrated","useRef","useSelect","select","getBlocks","replaceInnerBlocks","useDispatch","useEffect","current","length","generatedBlocks","push","createBlock","button","undefined","buttonsWrapper","createElement","Fragment","InnerBlocks","save","Content"],"sourceRoot":""}