{"version":3,"file":"blocks/hero/editor.js","mappings":"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","sources":["webpack://mccullough-digital-theme/external window \"React\"","webpack://mccullough-digital-theme/external window [\"wp\",\"blocks\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"i18n\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"element\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"data\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"blockEditor\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"components\"]","webpack://mccullough-digital-theme/./blocks/hero/editor.js"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","import { registerBlockType, createBlock } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport { useEffect, useRef } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport {\n    useBlockProps,\n    InnerBlocks,\n    InspectorControls,\n    MediaUpload,\n    MediaUploadCheck,\n} from '@wordpress/block-editor';\nimport {\n    PanelBody,\n    Button,\n    SelectControl,\n    RangeControl,\n    ToggleControl,\n} from '@wordpress/components';\n\nimport metadata from './block.json';\n\nconst defaultHeadline = metadata?.attributes?.headline?.default ?? '';\nconst defaultSubheading = metadata?.attributes?.subheading?.default ?? '';\nconst defaultButtonText = metadata?.attributes?.buttonText?.default\n    ?? __('Start a Project', 'mccullough-digital');\nconst defaultButtonLink = metadata?.attributes?.buttonLink?.default ?? '';\nconst MIN_CONTENT_OFFSET = -300; // Allow moving content UP\nconst MAX_CONTENT_OFFSET = 240;\n\nconst {\n    innerBlocks: {\n        allowedBlocks: allowedHeroBlocks = [\n            'core/heading',\n            'core/paragraph',\n            'core/list',\n            'core/buttons',\n            'core/group',\n            'core/image',\n            'core/media-text',\n            'mccullough-digital/button',\n        ],\n        template: heroTemplate = [\n            [\n                'core/heading',\n                {\n                    level: 1,\n                    className: 'hero__headline',\n                    placeholder: __('Add hero headline…', 'mccullough-digital'),\n                    content: defaultHeadline,\n                },\n            ],\n            [\n                'core/paragraph',\n                {\n                    placeholder: __('Add supporting copy…', 'mccullough-digital'),\n                    content: defaultSubheading,\n                },\n            ],\n            [\n                'mccullough-digital/button',\n                {\n                    buttonText: defaultButtonText,\n                    buttonLink: defaultButtonLink,\n                },\n            ],\n        ],\n        templateLock: heroTemplateLock = false,\n    } = {},\n} = metadata;\n\nconst DEFAULT_BUTTON_TEXT = defaultButtonText;\n\nregisterBlockType(metadata.name, {\n    ...metadata,\n    edit({ attributes, setAttributes, clientId }) {\n        const { \n            headline, \n            subheading, \n            buttonText, \n            buttonLink,\n            heroImageId,\n            heroImageUrl,\n            heroImageAlt,\n            imagePosition,\n            imageSize,\n            imageOpacity,\n            imageVerticalOffset,\n            imageHorizontalOffset,\n            heroImageWidth,\n            hideImageOnMobile,\n            contentAlignment,\n            contentOffset,\n        } = attributes;\n\n        const alignmentOptions = ['top', 'center', 'bottom'];\n        const clampOffset = (value) => {\n            const numericValue = Number(value);\n\n            if (!Number.isFinite(numericValue)) {\n                return MIN_CONTENT_OFFSET;\n            }\n\n            return Math.min(\n                MAX_CONTENT_OFFSET,\n                Math.max(MIN_CONTENT_OFFSET, numericValue)\n            );\n        };\n        const normalizedAlignment = alignmentOptions.includes(contentAlignment)\n            ? contentAlignment\n            : 'center';\n        const alignmentClass = `is-content-${normalizedAlignment}`;\n\n        const normalizedOffset = clampOffset(contentOffset);\n\n        const blockProps = useBlockProps({\n            className: ['hero', alignmentClass].filter(Boolean).join(' '),\n            style: {\n                '--hero-content-offset': `${normalizedOffset}px`,\n            },\n        });\n\n        const hasMigrated = useRef(false);\n        const { innerBlocks = [] } = useSelect(\n            (select) => ({\n                innerBlocks: select('core/block-editor').getBlocks(clientId),\n            }),\n            [clientId]\n        );\n        const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n        const extractNaturalWidth = (media) => {\n            if (!media) {\n                return 0;\n            }\n\n            const {\n                width,\n                media_details: mediaDetails = {},\n                sizes = {},\n            } = media;\n\n            const detailsWidth = mediaDetails?.width;\n            const fullSizeWidth = sizes?.full?.width;\n\n            return (\n                detailsWidth\n                || fullSizeWidth\n                || width\n                || 0\n            );\n        };\n\n        const heroMedia = useSelect(\n            (select) =>\n                heroImageId ? select('core').getMedia(heroImageId) : null,\n            [heroImageId]\n        );\n\n        useEffect(() => {\n            if (!heroImageId || !heroMedia) {\n                return;\n            }\n\n            const naturalWidth = extractNaturalWidth(heroMedia);\n\n            if (naturalWidth && naturalWidth !== heroImageWidth) {\n                setAttributes({ heroImageWidth: naturalWidth });\n            }\n        }, [heroImageId, heroImageWidth, heroMedia, setAttributes]);\n\n        useEffect(() => {\n            if (hasMigrated.current) {\n                return;\n            }\n\n            if (innerBlocks.length > 0) {\n                hasMigrated.current = true;\n                return;\n            }\n\n            const generatedBlocks = [];\n\n            if (headline) {\n                generatedBlocks.push(\n                    createBlock('core/heading', {\n                        level: 1,\n                        className: 'hero__headline',\n                        content: headline,\n                    })\n                );\n            }\n\n            if (subheading) {\n                generatedBlocks.push(\n                    createBlock('core/paragraph', {\n                        content: subheading,\n                    })\n                );\n            }\n\n            if (buttonText || buttonLink) {\n                const neonButton = createBlock('mccullough-digital/button', {\n                    buttonText: buttonText || DEFAULT_BUTTON_TEXT,\n                    buttonLink: buttonLink || '',\n                });\n\n                generatedBlocks.push(neonButton);\n            }\n\n            if (generatedBlocks.length === 0) {\n                return;\n            }\n\n            replaceInnerBlocks(clientId, generatedBlocks, false);\n            hasMigrated.current = true;\n        }, [\n            buttonLink,\n            buttonText,\n            clientId,\n            headline,\n            innerBlocks.length,\n            replaceInnerBlocks,\n            subheading,\n        ]);\n\n        const onSelectImage = (media) => {\n            setAttributes({\n                heroImageId: media.id,\n                heroImageUrl: media.url,\n                heroImageAlt: media.alt || '',\n                heroImageWidth: extractNaturalWidth(media),\n            });\n        };\n\n        const onRemoveImage = () => {\n            setAttributes({\n                heroImageId: 0,\n                heroImageUrl: '',\n                heroImageAlt: '',\n                heroImageWidth: 0,\n            });\n        };\n\n        const buildImagePresentation = () => {\n            const baseTransforms = {\n                'bottom-center': 'translateX(-50%)',\n                'center-right': 'translateY(-50%)',\n                'center-left': 'translateY(-50%)',\n                center: 'translate(-50%, -50%)',\n            };\n\n            const classes = ['hero__image-container'];\n\n            if (imagePosition) {\n                classes.push(`hero__image-position--${imagePosition}`);\n            }\n\n            if (hideImageOnMobile) {\n                classes.push('hero__image-hide-mobile');\n            }\n\n            const styles = {\n                opacity: imageOpacity / 100,\n            };\n\n            if (heroImageWidth > 0) {\n                styles.width = `calc(${imageSize} / 100 * ${heroImageWidth}px)`;\n            } else {\n                styles.width = `${imageSize}vw`;\n            }\n\n            const transformParts = [];\n\n            if (baseTransforms[imagePosition]) {\n                transformParts.push(baseTransforms[imagePosition]);\n            }\n\n            if (imageVerticalOffset !== 0) {\n                transformParts.push(`translateY(${imageVerticalOffset}px)`);\n            }\n\n            if (imageHorizontalOffset !== 0) {\n                transformParts.push(`translateX(${imageHorizontalOffset}px)`);\n            }\n\n            if (transformParts.length > 0) {\n                styles.transform = transformParts.join(' ');\n            }\n\n            return {\n                className: classes.join(' '),\n                styles,\n            };\n        };\n\n        const { className: imageContainerClassName, styles: imageStyles } =\n            buildImagePresentation();\n\n        return (\n            <>\n                <InspectorControls>\n                    <PanelBody\n                        title={__('Hero Image', 'mccullough-digital')}\n                        initialOpen={true}\n                    >\n                        <MediaUploadCheck>\n                            <MediaUpload\n                                onSelect={onSelectImage}\n                                allowedTypes={['image']}\n                                value={heroImageId}\n                                render={({ open }) => (\n                                    <div style={{ marginBottom: '16px' }}>\n                                        {!heroImageUrl ? (\n                                            <Button\n                                                onClick={open}\n                                                variant=\"secondary\"\n                                                style={{ width: '100%' }}\n                                            >\n                                                {__('Select Hero Image', 'mccullough-digital')}\n                                            </Button>\n                                        ) : (\n                                            <>\n                                                <img\n                                                    src={heroImageUrl}\n                                                    alt={heroImageAlt}\n                                                    style={{\n                                                        width: '100%',\n                                                        height: 'auto',\n                                                        marginBottom: '8px',\n                                                        borderRadius: '4px',\n                                                    }}\n                                                />\n                                                <div style={{ display: 'flex', gap: '8px' }}>\n                                                    <Button\n                                                        onClick={open}\n                                                        variant=\"secondary\"\n                                                        style={{ flex: 1 }}\n                                                    >\n                                                        {__('Replace Image', 'mccullough-digital')}\n                                                    </Button>\n                                                    <Button\n                                                        onClick={onRemoveImage}\n                                                        variant=\"secondary\"\n                                                        isDestructive\n                                                    >\n                                                        {__('Remove', 'mccullough-digital')}\n                                                    </Button>\n                                                </div>\n                                            </>\n                                        )}\n                                    </div>\n                                )}\n                            />\n                        </MediaUploadCheck>\n\n                        {heroImageUrl && (\n                            <>\n                                <SelectControl\n                                    label={__('Image Position', 'mccullough-digital')}\n                                    value={imagePosition}\n                                    options={[\n                                        { label: __('Bottom Right', 'mccullough-digital'), value: 'bottom-right' },\n                                        { label: __('Bottom Left', 'mccullough-digital'), value: 'bottom-left' },\n                                        { label: __('Bottom Center', 'mccullough-digital'), value: 'bottom-center' },\n                                        { label: __('Center Right', 'mccullough-digital'), value: 'center-right' },\n                                        { label: __('Center Left', 'mccullough-digital'), value: 'center-left' },\n                                        { label: __('Center', 'mccullough-digital'), value: 'center' },\n                                    ]}\n                                    onChange={(value) => setAttributes({ imagePosition: value })}\n                                />\n\n                                <RangeControl\n                                    label={__('Image Size (%)', 'mccullough-digital')}\n                                    value={imageSize}\n                                    onChange={(value) => setAttributes({ imageSize: value })}\n                                    min={10}\n                                    max={200}\n                                    step={5}\n                                />\n\n                                <RangeControl\n                                    label={__('Opacity (%)', 'mccullough-digital')}\n                                    value={imageOpacity}\n                                    onChange={(value) => setAttributes({ imageOpacity: value })}\n                                    min={0}\n                                    max={100}\n                                    step={5}\n                                />\n\n                                <RangeControl\n                                    label={__('Vertical Offset (px)', 'mccullough-digital')}\n                                    value={imageVerticalOffset}\n                                    onChange={(value) => setAttributes({ imageVerticalOffset: value })}\n                                    min={-200}\n                                    max={200}\n                                    step={10}\n                                    help={__('Positive moves down, negative moves up', 'mccullough-digital')}\n                                />\n\n                                <RangeControl\n                                    label={__('Horizontal Offset (px)', 'mccullough-digital')}\n                                    value={imageHorizontalOffset}\n                                    onChange={(value) => setAttributes({ imageHorizontalOffset: value })}\n                                    min={-200}\n                                    max={200}\n                                    step={10}\n                                    help={__('Positive moves right, negative moves left', 'mccullough-digital')}\n                                />\n\n                                <ToggleControl\n                                    label={__('Hide on Mobile', 'mccullough-digital')}\n                                    checked={hideImageOnMobile}\n                                    onChange={(value) => setAttributes({ hideImageOnMobile: value })}\n                                    help={__('Hide the image on screens smaller than 768px', 'mccullough-digital')}\n                                />\n                            </>\n                        )}\n                    </PanelBody>\n                    <PanelBody\n                        title={__('Content Layout', 'mccullough-digital')}\n                        initialOpen={false}\n                    >\n                        <SelectControl\n                            label={__('Vertical Alignment', 'mccullough-digital')}\n                            value={normalizedAlignment}\n                            options={[\n                                {\n                                    label: __('Top', 'mccullough-digital'),\n                                    value: 'top',\n                                },\n                                {\n                                    label: __('Center', 'mccullough-digital'),\n                                    value: 'center',\n                                },\n                                {\n                                    label: __('Bottom', 'mccullough-digital'),\n                                    value: 'bottom',\n                                },\n                            ]}\n                            onChange={(value) => {\n                                if (alignmentOptions.includes(value)) {\n                                    setAttributes({ contentAlignment: value });\n                                }\n                            }}\n                        />\n                        <RangeControl\n                            label={__('Vertical Position (px)', 'mccullough-digital')}\n                            value={normalizedOffset}\n                            onChange={(value) =>\n                                setAttributes({ contentOffset: clampOffset(value) })\n                            }\n                            min={MIN_CONTENT_OFFSET}\n                            max={MAX_CONTENT_OFFSET}\n                            step={10}\n                            allowReset\n                            help={__('Negative values move content UP, positive values move content DOWN', 'mccullough-digital')}\n                        />\n                    </PanelBody>\n                </InspectorControls>\n\n                <section {...blockProps}>\n                    <div\n                        className=\"hero-canvas-placeholder\"\n                        aria-hidden=\"true\"\n                        role=\"presentation\"\n                    />\n                    {heroImageUrl && (\n                        <div className={imageContainerClassName} style={imageStyles}>\n                            <img\n                                src={heroImageUrl}\n                                alt={heroImageAlt}\n                                className=\"hero__decorative-image\"\n                            />\n                        </div>\n                    )}\n                    <div className=\"hero-content\">\n                        <InnerBlocks\n                            allowedBlocks={ allowedHeroBlocks }\n                            template={ heroTemplate }\n                            templateLock={ heroTemplateLock }\n                        />\n                    </div>\n                </section>\n            </>\n        );\n    },\n    save() {\n        return <InnerBlocks.Content />;\n    },\n});\n"],"names":["window","defaultHeadline","_metadata$attributes$","metadata","attributes","headline","default","defaultSubheading","_metadata$attributes$2","subheading","defaultButtonText","_metadata$attributes$3","buttonText","__","defaultButtonLink","_metadata$attributes$4","buttonLink","MIN_CONTENT_OFFSET","innerBlocks","allowedBlocks","allowedHeroBlocks","template","heroTemplate","level","className","placeholder","content","templateLock","heroTemplateLock","DEFAULT_BUTTON_TEXT","registerBlockType","edit","setAttributes","clientId","heroImageId","heroImageUrl","heroImageAlt","imagePosition","imageSize","imageOpacity","imageVerticalOffset","imageHorizontalOffset","heroImageWidth","hideImageOnMobile","contentAlignment","contentOffset","alignmentOptions","clampOffset","value","numericValue","Number","isFinite","Math","min","max","normalizedAlignment","includes","alignmentClass","normalizedOffset","blockProps","useBlockProps","filter","Boolean","join","style","hasMigrated","useRef","useSelect","select","getBlocks","replaceInnerBlocks","useDispatch","extractNaturalWidth","media","width","media_details","mediaDetails","sizes","detailsWidth","fullSizeWidth","full","heroMedia","getMedia","useEffect","naturalWidth","current","length","generatedBlocks","push","createBlock","neonButton","onRemoveImage","imageContainerClassName","styles","imageStyles","buildImagePresentation","baseTransforms","center","classes","opacity","transformParts","transform","createElement","Fragment","InspectorControls","PanelBody","title","initialOpen","MediaUploadCheck","MediaUpload","onSelect","id","url","alt","allowedTypes","render","open","marginBottom","src","height","borderRadius","display","gap","Button","onClick","variant","flex","isDestructive","SelectControl","label","options","onChange","RangeControl","step","help","ToggleControl","checked","allowReset","role","InnerBlocks","save","Content"],"sourceRoot":""}