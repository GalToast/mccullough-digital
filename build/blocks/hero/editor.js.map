{"version":3,"file":"blocks/hero/editor.js","mappings":"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","sources":["webpack://mccullough-digital-theme/external window \"React\"","webpack://mccullough-digital-theme/external window [\"wp\",\"blocks\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"i18n\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"element\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"data\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"blockEditor\"]","webpack://mccullough-digital-theme/external window [\"wp\",\"components\"]","webpack://mccullough-digital-theme/./blocks/hero/editor.js"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","import { registerBlockType, createBlock } from '@wordpress/blocks';\r\nimport { __ } from '@wordpress/i18n';\r\nimport { useEffect, useRef } from '@wordpress/element';\r\nimport { useSelect, useDispatch } from '@wordpress/data';\r\nimport {\r\n    useBlockProps,\r\n    InnerBlocks,\r\n    InspectorControls,\r\n    MediaUpload,\r\n    MediaUploadCheck,\r\n} from '@wordpress/block-editor';\r\nimport {\r\n    PanelBody,\r\n    Button,\r\n    SelectControl,\r\n    RangeControl,\r\n    ToggleControl,\r\n} from '@wordpress/components';\r\n\r\nimport metadata from './block.json';\r\n\r\nconst defaultHeadline = metadata?.attributes?.headline?.default ?? '';\r\nconst defaultSubheading = metadata?.attributes?.subheading?.default ?? '';\r\nconst defaultButtonText = metadata?.attributes?.buttonText?.default\r\n    ?? __('Start a Project', 'mccullough-digital');\r\nconst defaultButtonLink = metadata?.attributes?.buttonLink?.default ?? '';\r\nconst MIN_CONTENT_OFFSET = -300; // Allow moving content UP\r\nconst MAX_CONTENT_OFFSET = 240;\r\n\r\nconst {\r\n    innerBlocks: {\r\n        allowedBlocks: allowedHeroBlocks = [\r\n            'core/heading',\r\n            'core/paragraph',\r\n            'core/list',\r\n            'core/buttons',\r\n            'core/group',\r\n            'core/image',\r\n            'core/media-text',\r\n        ],\r\n        template: heroTemplate = [\r\n            [\r\n                'core/heading',\r\n                {\r\n                    level: 1,\r\n                    className: 'hero__headline',\r\n                    placeholder: __('Add hero headline…', 'mccullough-digital'),\r\n                    content: defaultHeadline,\r\n                },\r\n            ],\r\n            [\r\n                'core/paragraph',\r\n                {\r\n                    placeholder: __('Add supporting copy…', 'mccullough-digital'),\r\n                    content: defaultSubheading,\r\n                },\r\n            ],\r\n            [\r\n                'core/buttons',\r\n                {\r\n                    layout: {\r\n                        type: 'flex',\r\n                        justifyContent: 'center',\r\n                    },\r\n                },\r\n                [\r\n                    [\r\n                        'core/button',\r\n                        {\r\n                            className: 'hero__cta-button',\r\n                            text: defaultButtonText,\r\n                            url: defaultButtonLink,\r\n                        },\r\n                    ],\r\n                ],\r\n            ],\r\n        ],\r\n        templateLock: heroTemplateLock = false,\r\n    } = {},\r\n} = metadata;\r\n\r\nconst DEFAULT_BUTTON_TEXT = defaultButtonText;\r\n\r\nregisterBlockType(metadata.name, {\r\n    ...metadata,\r\n    edit({ attributes, setAttributes, clientId }) {\r\n        const { \r\n            headline, \r\n            subheading, \r\n            buttonText, \r\n            buttonLink,\r\n            heroImageId,\r\n            heroImageUrl,\r\n            heroImageAlt,\r\n            imagePosition,\r\n            imageSize,\r\n            imageOpacity,\r\n            imageVerticalOffset,\r\n            imageHorizontalOffset,\r\n            heroImageWidth,\r\n            hideImageOnMobile,\r\n            contentAlignment,\r\n            contentOffset,\r\n        } = attributes;\r\n\r\n        const alignmentOptions = ['top', 'center', 'bottom'];\r\n        const clampOffset = (value) => {\r\n            const numericValue = Number(value);\r\n\r\n            if (!Number.isFinite(numericValue)) {\r\n                return MIN_CONTENT_OFFSET;\r\n            }\r\n\r\n            return Math.min(\r\n                MAX_CONTENT_OFFSET,\r\n                Math.max(MIN_CONTENT_OFFSET, numericValue)\r\n            );\r\n        };\r\n        const normalizedAlignment = alignmentOptions.includes(contentAlignment)\r\n            ? contentAlignment\r\n            : 'center';\r\n        const alignmentClass = `is-content-${normalizedAlignment}`;\r\n\r\n        const normalizedOffset = clampOffset(contentOffset);\r\n\r\n        const blockProps = useBlockProps({\r\n            className: ['hero', alignmentClass].filter(Boolean).join(' '),\r\n            style: {\r\n                '--hero-content-offset': `${normalizedOffset}px`,\r\n            },\r\n        });\r\n\r\n        const hasMigrated = useRef(false);\r\n        const { innerBlocks = [] } = useSelect(\r\n            (select) => ({\r\n                innerBlocks: select('core/block-editor').getBlocks(clientId),\r\n            }),\r\n            [clientId]\r\n        );\r\n        const { replaceInnerBlocks } = useDispatch('core/block-editor');\r\n\r\n        const extractNaturalWidth = (media) => {\r\n            if (!media) {\r\n                return 0;\r\n            }\r\n\r\n            const {\r\n                width,\r\n                media_details: mediaDetails = {},\r\n                sizes = {},\r\n            } = media;\r\n\r\n            const detailsWidth = mediaDetails?.width;\r\n            const fullSizeWidth = sizes?.full?.width;\r\n\r\n            return (\r\n                detailsWidth\r\n                || fullSizeWidth\r\n                || width\r\n                || 0\r\n            );\r\n        };\r\n\r\n        const heroMedia = useSelect(\r\n            (select) =>\r\n                heroImageId ? select('core').getMedia(heroImageId) : null,\r\n            [heroImageId]\r\n        );\r\n\r\n        useEffect(() => {\r\n            if (!heroImageId || !heroMedia) {\r\n                return;\r\n            }\r\n\r\n            const naturalWidth = extractNaturalWidth(heroMedia);\r\n\r\n            if (naturalWidth && naturalWidth !== heroImageWidth) {\r\n                setAttributes({ heroImageWidth: naturalWidth });\r\n            }\r\n        }, [heroImageId, heroImageWidth, heroMedia, setAttributes]);\r\n\r\n        useEffect(() => {\r\n            if (hasMigrated.current) {\r\n                return;\r\n            }\r\n\r\n            if (innerBlocks.length > 0) {\r\n                hasMigrated.current = true;\r\n                return;\r\n            }\r\n\r\n            const generatedBlocks = [];\r\n\r\n            if (headline) {\r\n                generatedBlocks.push(\r\n                    createBlock('core/heading', {\r\n                        level: 1,\r\n                        className: 'hero__headline',\r\n                        content: headline,\r\n                    })\r\n                );\r\n            }\r\n\r\n            if (subheading) {\r\n                generatedBlocks.push(\r\n                    createBlock('core/paragraph', {\r\n                        content: subheading,\r\n                    })\r\n                );\r\n            }\r\n\r\n            if (buttonText || buttonLink) {\r\n                const button = createBlock('core/button', {\r\n                    className: 'hero__cta-button',\r\n                    text: buttonText || DEFAULT_BUTTON_TEXT,\r\n                    url: buttonLink || undefined,\r\n                });\r\n\r\n                const buttonsWrapper = createBlock(\r\n                    'core/buttons',\r\n                    {\r\n                        layout: {\r\n                            type: 'flex',\r\n                            justifyContent: 'center',\r\n                        },\r\n                    },\r\n                    [button]\r\n                );\r\n\r\n                generatedBlocks.push(buttonsWrapper);\r\n            }\r\n\r\n            if (generatedBlocks.length === 0) {\r\n                return;\r\n            }\r\n\r\n            replaceInnerBlocks(clientId, generatedBlocks, false);\r\n            hasMigrated.current = true;\r\n        }, [\r\n            buttonLink,\r\n            buttonText,\r\n            clientId,\r\n            headline,\r\n            innerBlocks.length,\r\n            replaceInnerBlocks,\r\n            subheading,\r\n        ]);\r\n\r\n        const onSelectImage = (media) => {\r\n            setAttributes({\r\n                heroImageId: media.id,\r\n                heroImageUrl: media.url,\r\n                heroImageAlt: media.alt || '',\r\n                heroImageWidth: extractNaturalWidth(media),\r\n            });\r\n        };\r\n\r\n        const onRemoveImage = () => {\r\n            setAttributes({\r\n                heroImageId: 0,\r\n                heroImageUrl: '',\r\n                heroImageAlt: '',\r\n                heroImageWidth: 0,\r\n            });\r\n        };\r\n\r\n        const buildImagePresentation = () => {\r\n            const baseTransforms = {\r\n                'bottom-center': 'translateX(-50%)',\r\n                'center-right': 'translateY(-50%)',\r\n                'center-left': 'translateY(-50%)',\r\n                center: 'translate(-50%, -50%)',\r\n            };\r\n\r\n            const classes = ['hero__image-container'];\r\n\r\n            if (imagePosition) {\r\n                classes.push(`hero__image-position--${imagePosition}`);\r\n            }\r\n\r\n            if (hideImageOnMobile) {\r\n                classes.push('hero__image-hide-mobile');\r\n            }\r\n\r\n            const styles = {\r\n                opacity: imageOpacity / 100,\r\n            };\r\n\r\n            if (heroImageWidth > 0) {\r\n                styles.width = `calc(${imageSize} / 100 * ${heroImageWidth}px)`;\r\n            } else {\r\n                styles.width = `${imageSize}vw`;\r\n            }\r\n\r\n            const transformParts = [];\r\n\r\n            if (baseTransforms[imagePosition]) {\r\n                transformParts.push(baseTransforms[imagePosition]);\r\n            }\r\n\r\n            if (imageVerticalOffset !== 0) {\r\n                transformParts.push(`translateY(${imageVerticalOffset}px)`);\r\n            }\r\n\r\n            if (imageHorizontalOffset !== 0) {\r\n                transformParts.push(`translateX(${imageHorizontalOffset}px)`);\r\n            }\r\n\r\n            if (transformParts.length > 0) {\r\n                styles.transform = transformParts.join(' ');\r\n            }\r\n\r\n            return {\r\n                className: classes.join(' '),\r\n                styles,\r\n            };\r\n        };\r\n\r\n        const { className: imageContainerClassName, styles: imageStyles } =\r\n            buildImagePresentation();\r\n\r\n        return (\r\n            <>\r\n                <InspectorControls>\r\n                    <PanelBody\r\n                        title={__('Hero Image', 'mccullough-digital')}\r\n                        initialOpen={true}\r\n                    >\r\n                        <MediaUploadCheck>\r\n                            <MediaUpload\r\n                                onSelect={onSelectImage}\r\n                                allowedTypes={['image']}\r\n                                value={heroImageId}\r\n                                render={({ open }) => (\r\n                                    <div style={{ marginBottom: '16px' }}>\r\n                                        {!heroImageUrl ? (\r\n                                            <Button\r\n                                                onClick={open}\r\n                                                variant=\"secondary\"\r\n                                                style={{ width: '100%' }}\r\n                                            >\r\n                                                {__('Select Hero Image', 'mccullough-digital')}\r\n                                            </Button>\r\n                                        ) : (\r\n                                            <>\r\n                                                <img\r\n                                                    src={heroImageUrl}\r\n                                                    alt={heroImageAlt}\r\n                                                    style={{\r\n                                                        width: '100%',\r\n                                                        height: 'auto',\r\n                                                        marginBottom: '8px',\r\n                                                        borderRadius: '4px',\r\n                                                    }}\r\n                                                />\r\n                                                <div style={{ display: 'flex', gap: '8px' }}>\r\n                                                    <Button\r\n                                                        onClick={open}\r\n                                                        variant=\"secondary\"\r\n                                                        style={{ flex: 1 }}\r\n                                                    >\r\n                                                        {__('Replace Image', 'mccullough-digital')}\r\n                                                    </Button>\r\n                                                    <Button\r\n                                                        onClick={onRemoveImage}\r\n                                                        variant=\"secondary\"\r\n                                                        isDestructive\r\n                                                    >\r\n                                                        {__('Remove', 'mccullough-digital')}\r\n                                                    </Button>\r\n                                                </div>\r\n                                            </>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            />\r\n                        </MediaUploadCheck>\r\n\r\n                        {heroImageUrl && (\r\n                            <>\r\n                                <SelectControl\r\n                                    label={__('Image Position', 'mccullough-digital')}\r\n                                    value={imagePosition}\r\n                                    options={[\r\n                                        { label: __('Bottom Right', 'mccullough-digital'), value: 'bottom-right' },\r\n                                        { label: __('Bottom Left', 'mccullough-digital'), value: 'bottom-left' },\r\n                                        { label: __('Bottom Center', 'mccullough-digital'), value: 'bottom-center' },\r\n                                        { label: __('Center Right', 'mccullough-digital'), value: 'center-right' },\r\n                                        { label: __('Center Left', 'mccullough-digital'), value: 'center-left' },\r\n                                        { label: __('Center', 'mccullough-digital'), value: 'center' },\r\n                                    ]}\r\n                                    onChange={(value) => setAttributes({ imagePosition: value })}\r\n                                />\r\n\r\n                                <RangeControl\r\n                                    label={__('Image Size (%)', 'mccullough-digital')}\r\n                                    value={imageSize}\r\n                                    onChange={(value) => setAttributes({ imageSize: value })}\r\n                                    min={10}\r\n                                    max={200}\r\n                                    step={5}\r\n                                />\r\n\r\n                                <RangeControl\r\n                                    label={__('Opacity (%)', 'mccullough-digital')}\r\n                                    value={imageOpacity}\r\n                                    onChange={(value) => setAttributes({ imageOpacity: value })}\r\n                                    min={0}\r\n                                    max={100}\r\n                                    step={5}\r\n                                />\r\n\r\n                                <RangeControl\r\n                                    label={__('Vertical Offset (px)', 'mccullough-digital')}\r\n                                    value={imageVerticalOffset}\r\n                                    onChange={(value) => setAttributes({ imageVerticalOffset: value })}\r\n                                    min={-200}\r\n                                    max={200}\r\n                                    step={10}\r\n                                    help={__('Positive moves down, negative moves up', 'mccullough-digital')}\r\n                                />\r\n\r\n                                <RangeControl\r\n                                    label={__('Horizontal Offset (px)', 'mccullough-digital')}\r\n                                    value={imageHorizontalOffset}\r\n                                    onChange={(value) => setAttributes({ imageHorizontalOffset: value })}\r\n                                    min={-200}\r\n                                    max={200}\r\n                                    step={10}\r\n                                    help={__('Positive moves right, negative moves left', 'mccullough-digital')}\r\n                                />\r\n\r\n                                <ToggleControl\r\n                                    label={__('Hide on Mobile', 'mccullough-digital')}\r\n                                    checked={hideImageOnMobile}\r\n                                    onChange={(value) => setAttributes({ hideImageOnMobile: value })}\r\n                                    help={__('Hide the image on screens smaller than 768px', 'mccullough-digital')}\r\n                                />\r\n                            </>\r\n                        )}\r\n                    </PanelBody>\r\n                    <PanelBody\r\n                        title={__('Content Layout', 'mccullough-digital')}\r\n                        initialOpen={false}\r\n                    >\r\n                        <SelectControl\r\n                            label={__('Vertical Alignment', 'mccullough-digital')}\r\n                            value={normalizedAlignment}\r\n                            options={[\r\n                                {\r\n                                    label: __('Top', 'mccullough-digital'),\r\n                                    value: 'top',\r\n                                },\r\n                                {\r\n                                    label: __('Center', 'mccullough-digital'),\r\n                                    value: 'center',\r\n                                },\r\n                                {\r\n                                    label: __('Bottom', 'mccullough-digital'),\r\n                                    value: 'bottom',\r\n                                },\r\n                            ]}\r\n                            onChange={(value) => {\r\n                                if (alignmentOptions.includes(value)) {\r\n                                    setAttributes({ contentAlignment: value });\r\n                                }\r\n                            }}\r\n                        />\r\n                        <RangeControl\r\n                            label={__('Vertical Position (px)', 'mccullough-digital')}\r\n                            value={normalizedOffset}\r\n                            onChange={(value) =>\r\n                                setAttributes({ contentOffset: clampOffset(value) })\r\n                            }\r\n                            min={MIN_CONTENT_OFFSET}\r\n                            max={MAX_CONTENT_OFFSET}\r\n                            step={10}\r\n                            allowReset\r\n                            help={__('Negative values move content UP, positive values move content DOWN', 'mccullough-digital')}\r\n                        />\r\n                    </PanelBody>\r\n                </InspectorControls>\r\n\r\n                <section {...blockProps}>\r\n                    <div\r\n                        className=\"hero-canvas-placeholder\"\r\n                        aria-hidden=\"true\"\r\n                        role=\"presentation\"\r\n                    />\r\n                    {heroImageUrl && (\r\n                        <div className={imageContainerClassName} style={imageStyles}>\r\n                            <img\r\n                                src={heroImageUrl}\r\n                                alt={heroImageAlt}\r\n                                className=\"hero__decorative-image\"\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    <div className=\"hero-content\">\r\n                        <InnerBlocks\r\n                            allowedBlocks={ allowedHeroBlocks }\r\n                            template={ heroTemplate }\r\n                            templateLock={ heroTemplateLock }\r\n                        />\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    },\r\n    save() {\r\n        return <InnerBlocks.Content />;\r\n    },\r\n});\r\n"],"names":["window","defaultHeadline","_metadata$attributes$","metadata","attributes","headline","default","defaultSubheading","_metadata$attributes$2","subheading","defaultButtonText","_metadata$attributes$3","buttonText","__","defaultButtonLink","_metadata$attributes$4","buttonLink","MIN_CONTENT_OFFSET","innerBlocks","allowedBlocks","allowedHeroBlocks","template","heroTemplate","level","className","placeholder","content","layout","type","justifyContent","text","url","templateLock","heroTemplateLock","DEFAULT_BUTTON_TEXT","registerBlockType","edit","setAttributes","clientId","heroImageId","heroImageUrl","heroImageAlt","imagePosition","imageSize","imageOpacity","imageVerticalOffset","imageHorizontalOffset","heroImageWidth","hideImageOnMobile","contentAlignment","contentOffset","alignmentOptions","clampOffset","value","numericValue","Number","isFinite","Math","min","max","normalizedAlignment","includes","alignmentClass","normalizedOffset","blockProps","useBlockProps","filter","Boolean","join","style","hasMigrated","useRef","useSelect","select","getBlocks","replaceInnerBlocks","useDispatch","extractNaturalWidth","media","width","media_details","mediaDetails","sizes","detailsWidth","fullSizeWidth","full","heroMedia","getMedia","useEffect","naturalWidth","current","length","generatedBlocks","push","createBlock","button","undefined","buttonsWrapper","onRemoveImage","imageContainerClassName","styles","imageStyles","buildImagePresentation","baseTransforms","center","classes","opacity","transformParts","transform","createElement","Fragment","InspectorControls","PanelBody","title","initialOpen","MediaUploadCheck","MediaUpload","onSelect","id","alt","allowedTypes","render","open","marginBottom","src","height","borderRadius","display","gap","Button","onClick","variant","flex","isDestructive","SelectControl","label","options","onChange","RangeControl","step","help","ToggleControl","checked","allowReset","role","InnerBlocks","save","Content"],"sourceRoot":""}